(function() {
  'use strict';
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

document.addEventListener('DOMContentLoaded', function () {
  var childrenInput = document.getElementById('children');
  var childrenFields = document.getElementById('childrenFields');

  if (childrenInput && childrenFields) {
    childrenInput.addEventListener('input', function () {
      var numChildren = parseInt(this.value);
      childrenFields.innerHTML = '';

      if (isNaN(numChildren) || numChildren < 0 || numChildren > 6) {
        alert('S√≥lo se permiten n√∫meros entre 0 y 6.');
        this.value = '';
        return;
      }

      for (var i = 0; i < numChildren; i++) {
        var childField = document.createElement('div');
        childField.classList.add('form-row', 'mb-3');

        childField.innerHTML = `
          <div class="col-md-12">
              <h3 class="font-weight-bold text-success">Hijo(a) ${i + 1}</h3>
          </div>

          <div class="form-group col">
              <label for="child_dni${i + 1}">DNI</label>
              <input type="text" name="child_dni${i + 1}" id="child_dni${i + 1}" class="form-control" required />
              <div class="invalid-feedback">Por favor, ingrese su DNI.</div>
          </div>

          <div class="form-group col">
              <label for="child_full_name${i + 1}">Nombre</label>
              <input type="text" name="child_full_name${i + 1}" id="child_full_name${i + 1}" class="form-control" required />
              <div class="invalid-feedback">Por favor, ingrese su nombre.</div>
          </div>

          <div class="form-group col">
              <label for="child_birthday${i + 1}">F. Nac</label>
              <input type="date" name="child_birthday${i + 1}" id="child_birthday${i + 1}" class="form-control" required />
              <div class="invalid-feedback">Por favor, ingrese su fecha de nacimiento.</div>
          </div>

          <div class="form-group col">
              <label for="child_relationship${i + 1}">Parentesco</label>
              <select class="form-control" name="child_relationship${i + 1}" id="child_relationship${i + 1}" required>
                  <option value="">Seleccione una opci√≥n</option>
                  <option value="Hijo">Hijo</option>
                  <option value="Hija">Hija</option>
              </select>
              <div class="invalid-feedback">Por favor, seleccione un parentesco.</div>
          </div>

          <div class="form-group col">
              <label for="child_gender${i + 1}">G√©nero</label>
              <select class="form-control" name="child_gender${i + 1}" id="child_gender${i + 1}" required>
                  <option value="">Seleccione una opci√≥n</option>
                  <option value="male">Masculino</option>
                  <option value="female">Femenino</option>
              </select>
              <div class="invalid-feedback">Por favor, seleccione un g√©nero.</div>
          </div>

          <div class="form-group col">
              <label for="child_address${i + 1}">Direcci√≥n</label>
              <input type="text" name="child_address${i + 1}" id="child_address${i + 1}" class="form-control" required />
              <div class="invalid-feedback">Por favor, ingrese una direcci√≥n.</div>
          </div>

        `;

        childrenFields.appendChild(childField);
      }
    });
  }
});


const MAX_BENEFICIARIES = 6;

// üîÅ Actualiza t√≠tulos "Familiar 1", "Familiar 2", etc.
function updateBeneficiaryTitles() {
  const rows = document.querySelectorAll('#familyMembersFields .form-row');
  rows.forEach((row, idx) => {
    const title = row.querySelector('h3');
    if (title) {
      title.textContent = `Familiar ${idx + 1}`;
    }
  });
}

// ‚úÖ Crea una fila de beneficiario (vac√≠a o con datos)
function createBeneficiaryRow(autoGenerated = false, data = {}) {
  const familyMembersFields = document.getElementById('familyMembersFields');

  const currentCount = familyMembersFields.querySelectorAll('.form-row').length;
  if (currentCount >= MAX_BENEFICIARIES) {
    alert('No se pueden agregar m√°s de 6 beneficiarios.');
    return;
  }

  const index = currentCount + 1;

  const row = document.createElement('div');
  row.classList.add('form-row', 'mb-3');
  if (autoGenerated) row.classList.add('auto-generated');

  row.innerHTML = `
    <div class="col-md-12 d-flex justify-content-between align-items-center">
        <h3 class="font-weight-bold text-info">Familiar ${index}</h3>
        <button type="button" class="btn btn-danger btn-sm text-white remove-beneficiary" title="Eliminar beneficiario">‚ùå</button>
    </div>

    <div class="form-group col">
        <label>DNI</label>
        <input type="text" name="familiar_dni${index}" class="form-control" value="${data.dni || ''}" required />
    </div>

    <div class="form-group col">
        <label>Nombre</label>
        <input type="text" name="familiar_full_name${index}" class="form-control" value="${data.name || ''}" required />
    </div>

    <div class="form-group col">
        <label>F. Nac</label>
        <input type="date" name="familiar_birthday${index}" class="form-control" value="${data.birthday || ''}" required />
    </div>

    <div class="form-group col">
        <label>Parentesco</label>
        <select name="familiar_relationship${index}" class="form-control" required>
            <option value="">Seleccione una opci√≥n</option>
            <option value="Esposo/a" ${data.relationship === 'Esposo/a' ? 'selected' : ''}>Esposo(a)</option>
            <option value="Conviviente" ${data.relationship === 'Conviviente' ? 'selected' : ''}>Conviviente</option>
            <option value="Hijo" ${data.relationship === 'Hijo' ? 'selected' : ''}>Hijo</option>
            <option value="Hija" ${data.relationship === 'Hija' ? 'selected' : ''}>Hija</option>
        </select>
    </div>

    <div class="form-group col">
        <label>G√©nero</label>
        <select name="familiar_gender${index}" class="form-control" required>
            <option value="">Seleccione una opci√≥n</option>
            <option value="male" ${data.gender === 'male' ? 'selected' : ''}>Masculino</option>
            <option value="female" ${data.gender === 'female' ? 'selected' : ''}>Femenino</option>
        </select>
    </div>

    <div class="form-group col">
        <label>Direcci√≥n</label>
        <input type="text" name="familiar_address${index}" class="form-control" value="${data.address || ''}" required />
    </div>

    <div class="form-group col">
        <label>Beneficiario</label>
        <input type="checkbox" name="is_beneficiary${index}" class="form-control" checked />
    </div>
  `;

  // Bot√≥n para eliminar esta fila
  row.querySelector('.remove-beneficiary').addEventListener('click', () => {
    row.remove();
    updateBeneficiaryTitles();
  });

  familyMembersFields.appendChild(row);
  updateBeneficiaryTitles();
}

document.addEventListener('DOMContentLoaded', function () {
  const familyMembersField = document.getElementById('familyMembers');
  const addEmptyBtn = document.getElementById('addEmptyBeneficiary');
  const copyBtn = document.getElementById('copyChildrenToBeneficiaries');
  const familyMembersFields = document.getElementById('familyMembersFields');
  const childrenFields = document.getElementById('childrenFields');

  // Limpiar los autogenerados por el input
  function clearAutoGeneratedBeneficiaries() {
    familyMembersFields.querySelectorAll('.auto-generated').forEach(el => el.remove());
    updateBeneficiaryTitles();
  }

  // üìå Input para n√∫mero de beneficiarios
  if (familyMembersField) {
    familyMembersField.addEventListener('input', function () {
      const value = parseInt(this.value);
      if (isNaN(value) || value < 0 || value > MAX_BENEFICIARIES) {
        alert("Ingrese un n√∫mero v√°lido entre 0 y 6.");
        this.value = '';
        return;
      }
      clearAutoGeneratedBeneficiaries();
      for (let i = 0; i < value; i++) {
        createBeneficiaryRow(true);
      }
    });
  }

  // üìå Bot√≥n para agregar beneficiario vac√≠o
  if (addEmptyBtn) {
    addEmptyBtn.addEventListener('click', function () {
      createBeneficiaryRow(false);
    });
  }

  // üìå Bot√≥n para copiar hijos a beneficiarios
  if (copyBtn && childrenFields) {
    copyBtn.addEventListener('click', function () {
      const children = childrenFields.querySelectorAll('.form-row');
      let total = familyMembersFields.querySelectorAll('.form-row').length;

      for (const child of children) {
        if (total >= MAX_BENEFICIARIES) {
          alert("No se pueden agregar m√°s de 6 beneficiarios.");
          break;
        }

        const getVal = (selector) => child.querySelector(selector)?.value || '';
        const data = {
          dni: getVal('input[name^="child_dni"]'),
          name: getVal('input[name^="child_full_name"]'),
          birthday: getVal('input[name^="child_birthday"]'),
          relationship: getVal('select[name^="child_relationship"]'),
          gender: getVal('select[name^="child_gender"]'),
          address: getVal('input[name^="child_address"]')
        };

        createBeneficiaryRow(false, data);
        total++;
      }
    });
  }
});


document.addEventListener('DOMContentLoaded', function() {
  var otrosMembersField = document.getElementById('otrosMembers');
  var otrosMembersFields = document.getElementById('otrosMembersFields');

  otrosMembersField.addEventListener('input', function() {
    var numFamilyMembers = parseInt(this.value);
    otrosMembersFields.innerHTML = '';

    for (var j = 0; j < numFamilyMembers; j++) {
      var otrosMembersField = document.createElement('div');
      otrosMembersField.classList.add('form-row', 'mb-3');
      otrosMembersField.innerHTML = `
        
          <div class="col-md-12">
              <h3 class="font-weight-bold text-info">Familiar${j + 7}</h3>
          </div>
          
          <div class="form-group col">
              <label for="familiar_dni${j + 7}">DNI</label>
              <input type="text" name="familiar_dni${j + 7}" id="familiar_dni${j + 7}" class="form-control" required="True"/>
              <div class="invalid-feedback">
                Por favor, ingrese su DNI.
              </div>
          </div>
          <div class="form-group col">
              <label for="familiar_full_name${j + 7}" >Nombre</label>
              <input type="text" name="familiar_full_name${j + 7}" id="familiar_full_name${j + 7}" class="form-control" required="True"/>
              <div class="invalid-feedback">
                Por favor, ingrese su nombre.
              </div>
          </div>
          <div class="form-group col">
              <label for="familiar_birthday${j + 7}">F. Nac</label>
              <input type="date" name="familiar_birthday${j + 7}" class="form-control" id="familiar_birthday${j + 7}" required="True"/>
              <div class="invalid-feedback">
                Por favor, ingrese su fecha de nacimiento.
              </div>
          </div>
          <div class="form-group col">
              <label for="familiar_relationship${j + 7}">Parentesco</label>
              <select class="form-control" name="familiar_relationship${j + 7}" id="familiar_relationship${j + 7}" required="True">
                  <option value="">Seleccione una opci√≥n</option>
                  <option value="Madre">Madre</option>
                  <option value="Padre">Padre</option>
                  <option value="Hermano">Hermano</option>
                  <option value="Hermana">Hermana</option>
              </select>
              <div class="invalid-feedback">
                Por favor, seleccione un parentesco.
              </div>
          </div>
          <div class="form-group col">
              <label for="familiar_gender${j + 7}">G√©nero</label>
              <select class="form-control" name="familiar_gender${j + 7}" id="familiar_gender${j + 7}" required="True">
                  <option value="">Seleccione una opci√≥n</option>
                  <option value="male">Masculino</option>
                  <option value="female">Femenino</option>
              </select>
              <div class="invalid-feedback">
                Por favor, seleccione un g√©nero.
              </div>
          </div>
          <div class="form-group col">
              <label for="familiar_address${j + 7}">Direcci√≥n</label>
              <input type="text" name="familiar_address${j + 7}" class="form-control" id="familiar_address${j + 7}" required="True"/>
              <div class="invalid-feedback">
                Por favor, ingrese una direcci√≥n.
              </div>
          </div>
          <div class="form-group col">
              <label for="is_beneficiary${j + 7}">Beneficiario</label>
              <input type="checkbox" name="is_beneficiary${j + 7}" class="form-control" id="is_beneficiary${j + 7}" checked/>
          </div>
          
        
      `;
      otrosMembersFields.appendChild(otrosMembersField);
    }
  });
});

document.addEventListener('DOMContentLoaded', function() {
var privatePensionCheckbox = document.getElementById('private_pension_system');
var pensionOptionsContainer = document.getElementById('pension_options');
var afpFirstJob = document.getElementById('afp_first_job');
var comingFromOnp = document.getElementById('coming_from_onp');
var comingFromAfp = document.getElementById('coming_from_afp');
var radioOptions = document.querySelectorAll('.radio-option');

privatePensionCheckbox.addEventListener('change', function() {
  console.log('ingresamos')
if (this.checked) {
  pensionOptionsContainer.style.display = 'block';
} else {
  pensionOptionsContainer.style.display = 'none';
  radioOptions.forEach(radio => radio.checked = false);
  afpFirstJob.checked = false;
  comingFromOnp.checked = false;
  comingFromAfp.checked = false;
}
});

radioOptions.forEach(radio => {
radio.addEventListener('change', function() {
  radioOptions.forEach(otherRadio => {
    if (otherRadio !== this) {
      otherRadio.checked = false;
    }
  });
});
});

});

document.addEventListener('DOMContentLoaded', function () {
  var childrenInput = document.getElementById('children');
  if (childrenInput) {
    childrenInput.addEventListener('input', validateInputChildren);
  }
});

function validateInputfamily() {
  var input = document.getElementById('familyMembers');
  var value = parseInt(input.value);
  if (value < 0 || value > 6) {
      alert('Only numbers 1, 2, 3, 4, 5 and 6 are allowed.');
      input.value = '';
  }
}

function validateInputChildren() {
  var input = document.getElementById('children');
  var value = parseInt(input.value);
  if (value < 0 || value > 6) {
      alert('Only numbers between 0 and 6 are allowed for children.');
      input.value = '';
  }
}

function validateInput() {
  var input = document.getElementById('otrosMembers');
  var value = parseInt(input.value);
  if (value < 0 || value > 4) {
      alert('S√≥lo se permiten los n√∫meros 1, 2, 3 y 4.');
      input.value = '';
  }
}

function toggleCheckbox(checkbox) {
  var afpFirstJob = document.getElementById('afp_first_job');
  var comingFromOnp = document.getElementById('coming_from_onp');
  var comingFromAfp = document.getElementById('coming_from_afp');
  var otherCheckbox = document.getElementById(checkbox.id === 'private_pension_system' ? 'national_pension_system' : 'private_pension_system');
  if (checkbox.checked) {
      otherCheckbox.checked = false;
      if (checkbox.id === 'private_pension_system') {
          document.getElementById('pension_options').style.display = 'block';
      } else {
          document.getElementById('pension_options').style.display = 'none';
          afpFirstJob.checked = false;
          comingFromOnp.checked = false;
          comingFromAfp.checked = false;
      }
  } else {
      document.getElementById('pension_options').style.display = 'none';
      afpFirstJob.checked = false;
      comingFromOnp.checked = false;
      comingFromAfp.checked = false;
  }
}

async function apiperu_dni(dni) {
  const url = "https://apiperu.dev/api/dni";
  const token =
    "4b56a00274d444b40cc38d47e69c72d6f5a362dddbee20470b9f1dd8d6a65479";
  const headers = {
    Accept: "application/json",
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  };
  try {
    const params = { dni: String(dni) };
    const params_json = JSON.stringify(params);
    const response = await fetch(url, {
      method: "POST",
      headers: headers,
      body: params_json,
    });
    if (response.ok) {
      const data = await response.json();
      const access_data = data.data;
      return [
        access_data.nombre_completo,
      ];
    } else {
      console.error(`Error ${response.status}`);
      console.error(await response.text());
    }
  } catch (error) {
    console.error(`Error ${error}`);
  }
}

async function consultarDNI() {
  const dni = document.getElementById("dni").value;
  if (dni) {
    try {
      const [nombre_completo] = await apiperu_dni(dni);
      document.getElementById("name").value = nombre_completo;
      console.log(document.getElementById("name").value);
      console.log(name);
      console.log(nombre_completo);
    } catch (error) {
      console.error("Error al consultar el DNI:", error);
    }
  } else {
    console.error("Ingrese un n√∫mero de DNI");
  }
}


function validateForm(event) {
  event.preventDefault();
  const form = document.getElementById('employeeForm');
  const fields = form.querySelectorAll('input, select, textarea');
  let allFieldsValid = true;
  let requiredFieldsValid = true;

  fields.forEach(field => {
      if (!field.checkValidity()) {
          allFieldsValid = false;
          if (field.hasAttribute('required')) {
              requiredFieldsValid = false;
          }
          field.classList.add('is-invalid');
      } else {
          field.classList.remove('is-invalid');
      }
  });

  if (requiredFieldsValid) {
   
      populateModal();
      $('#confirmationModal').modal('show');
  }
  return allFieldsValid;
}


document.addEventListener('DOMContentLoaded', function() {
  var privatePensionSystemField = document.getElementById('private_pension_system');
  if (privatePensionSystemField) {
    privatePensionSystemField.addEventListener('change', function() {
      const pensionOptions = document.getElementById('pension_options');
      
      if (privatePensionSystemField.type === 'checkbox') {
        pensionOptions.style.display = this.checked ? 'block' : 'none';
      } else {
        pensionOptions.style.display = this.value === 'yes' ? 'block' : 'none';
      }
      
      if (!this.checked && this.type === 'checkbox') {
        document.getElementById('afp_first_job').checked = false;
        document.getElementById('coming_from_onp').checked = false;
        document.getElementById('coming_from_afp').checked = false;
      }
    });
  }
});


function populateModal() {
  document.getElementById('modal-dni').innerText = document.getElementById('dni').value;
  document.getElementById('modal-name').innerText = document.getElementById('name').value;
  document.getElementById('modal-children').innerText = document.getElementById('children').value;
  document.getElementById('modal-gender').innerText = getSelectedOptionTextById('gender');
  document.getElementById('modal-birthday').innerText = document.getElementById('birthday').value;
  document.getElementById('modal-marital').innerText = getSelectedOptionTextById('marital');
  document.getElementById('modal-email').innerText = document.getElementById('email').value;
  document.getElementById('modal-phone').innerText = document.getElementById('phone').value;
  document.getElementById('modal-emergency_contact').innerText = document.getElementById('emergency_contact').value;
  document.getElementById('modal-emergency_phone').innerText = document.getElementById('emergency_phone').value;
  document.getElementById('modal-nationality').innerText = getSelectedOptionTextById('nationality_id');
  document.getElementById('modal-identification').innerText = getSelectedOptionTextById('identification_type_id');
  document.getElementById('modal-country').innerText = getSelectedOptionTextById('country_id');
  document.getElementById('modal-province').innerText = getSelectedOptionTextById('state_id');
  document.getElementById('modal-city').innerText = getSelectedOptionTextById('city_id');
  document.getElementById('modal-district').innerText = getSelectedOptionTextById('district_id');
  // document.getElementById('modal-zip').innerText = document.getElementById('zip').value;
  document.getElementById('modal-street').innerText = document.getElementById('street').value;
  document.getElementById('modal-reference_location').innerText = document.getElementById('reference_location').value;
  document.getElementById('modal-education_level').innerText = getSelectedOptionTextBySelector('select[name="education_level"]');
  document.getElementById('modal-education_start_date').innerText = document.getElementById('education_start_date').value;
  document.getElementById('modal-education_end_date').innerText = document.getElementById('education_end_date').value;
  document.getElementById('modal-institution').innerText = document.getElementById('institution').value;
  document.getElementById('modal-profession').innerText = document.getElementById('profession').value;
  document.getElementById('modal-familyMembers').innerText = document.getElementById('familyMembers').value;
  document.getElementById('modal-otrosMembers').innerText = document.getElementById('otrosMembers').value;
  document.getElementById('modal-private_pension_system').innerText = document.getElementById('private_pension_system').checked ? 'Si' : 'No';
  document.getElementById('modal-national_pension_system').innerText = document.getElementById('national_pension_system').checked ? 'Si' : 'No';

  const privatePensionSystem = document.getElementById('private_pension_system').checked;
  const modalPrivatePensionSystem = document.getElementById('modal-private_pension_system');
  const modalPensionOption = document.getElementById('modal-pension-option');
  const modalPensOpti = document.getElementById('pens_opti');

  if (modalPrivatePensionSystem) {
      modalPrivatePensionSystem.innerText = privatePensionSystem ? 'Si' : 'No';
  }

  if (privatePensionSystem) {
      modalPensOpti.style.display = 'block';
  } else {
      modalPensOpti.style.display = 'none';
  }

  let pensionOptionText = 'No seleccionado';
  if (privatePensionSystem) {
      if (document.getElementById('afp_first_job').checked) {
          pensionOptionText = '(AFP) Primer empleo';
      } else if (document.getElementById('coming_from_onp').checked) {
          pensionOptionText = 'Procedente de la ONP';
      } else if (document.getElementById('coming_from_afp').checked) {
          pensionOptionText = 'Procedente de la AFP';
    }
  }

  if (modalPensionOption) {
      modalPensionOption.innerText = pensionOptionText;
  }

  const familyMembersCount = parseInt(document.getElementById('familyMembers').value, 10);
  const familyMembersModal = document.getElementById('familyMembersModal');
  familyMembersModal.innerHTML = '';
  if (familyMembersCount > 0) {
      let tableHTML = `
          <table class="table table-striped">
              <thead>
                  <tr>
                      <th>DNI</th>
                      <th>Nombre</th>
                      <th>F. Nac</th>
                      <th>Parentesco</th>
                      <th>G√©nero</th>
                      <th>Direcci√≥n</th>
                  </tr>
              </thead>
              <tbody>`;
      for (let i = 1; i <= familyMembersCount; i++) {
          tableHTML += `
              <tr>
                  <td>${document.getElementById(`familiar_dni${i}`).value}</td>
                  <td>${document.getElementById(`familiar_full_name${i}`).value}</td>
                  <td>${document.getElementById(`familiar_birthday${i}`).value}</td>
                  <td>${getSelectedOptionTextById(`familiar_relationship${i}`)}</td>
                  <td>${getSelectedOptionTextById(`familiar_gender${i}`)}</td>
                  <td>${document.getElementById(`familiar_address${i}`).value}</td>
              </tr>`;
      }
      tableHTML += `
              </tbody>
          </table>`;
      familyMembersModal.innerHTML = tableHTML;
  }

  const otrosMembersCount = parseInt(document.getElementById('otrosMembers').value, 10);
  const otrosMembersModal = document.getElementById('otrosMembersModal');
  otrosMembersModal.innerHTML = '';
  if (otrosMembersCount > 0) {
      let tableHTML = `
          <table class="table table-striped">
              <thead>
                  <tr>
                      <th>DNI</th>
                      <th>Nombre</th>
                      <th>F. Nac</th>
                      <th>Parentesco</th>
                      <th>G√©nero</th>
                      <th>Direcci√≥n</th>
                  </tr>
              </thead>
              <tbody>`;
      const inicioOtros = 7;  // Asegura que otros beneficiarios empiecen en 7
      for (let j = inicioOtros; j < inicioOtros + otrosMembersCount; j++) {
          tableHTML += `
              <tr>
                  <td>${document.getElementById(`familiar_dni${j}`).value}</td>
                  <td>${document.getElementById(`familiar_full_name${j}`).value}</td>
                  <td>${document.getElementById(`familiar_birthday${j}`).value}</td>
                  <td>${getSelectedOptionTextById(`familiar_relationship${j}`)}</td>
                  <td>${getSelectedOptionTextById(`familiar_gender${j}`)}</td>
                  <td>${document.getElementById(`familiar_address${j}`).value}</td>
              </tr>`;
      }
      tableHTML += `
              </tbody>
          </table>`;
      otrosMembersModal.innerHTML = tableHTML;
  }
}

function getSelectedOptionTextBySelector(selector) {
  var selectElement = document.querySelector(selector);
  if (selectElement && selectElement.selectedIndex !== -1) {
      var selectedOption = selectElement.options[selectElement.selectedIndex];
      return selectedOption ? selectedOption.text : '';
  }
  return '';
}

function getSelectedOptionTextById(id) {
  const selectElement = document.getElementById(id);
  if (selectElement && selectElement.selectedIndex >= 0) {
      return selectElement.options[selectElement.selectedIndex].text;
  }
  return '';
}

document.addEventListener('DOMContentLoaded', function() {
  var employeeForm = document.getElementById('employeeForm');
  if (employeeForm) {
    employeeForm.addEventListener('submit', validateForm);
  } else {
    console.error('El formulario con ID "employeeForm" no se encontr√≥ en el DOM.');
  }
});


function submitForm() {
  const cancelButton = document.getElementById('cancelButton');
  const confirmButton = document.getElementById('confirmButton');
  
  cancelButton.disabled = true;
  confirmButton.disabled = true;
  confirmButton.innerText = "Processing...";

  document.getElementById('employeeForm').submit();
}

function volverAlFormulario() {
  window.location.href = '/applicantpartner';
}

document.addEventListener('DOMContentLoaded', function() {
  var identificationTypeSelect = document.getElementById('identification_type_id');
  var dniInput = document.getElementById('dni');

  identificationTypeSelect.addEventListener('change', function() {
      var selectedOption = identificationTypeSelect.options[identificationTypeSelect.selectedIndex].text;

      if (selectedOption === 'DNI') {
          dniInput.maxLength = 8;
          dniInput.pattern = '\\d{8}';
          dniInput.title = 'El DNI debe tener exactamente 8 d√≠gitos.';
      } else {
          dniInput.maxLength = 9;
          dniInput.pattern = '\\d{1,9}';
          dniInput.title = 'La identificaci√≥n debe tener un m√°ximo de 9 d√≠gitos.';
      }

      if (dniInput.value.length > dniInput.maxLength) {
          dniInput.value = '';
      }
  });
});

document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.custom-file-input').forEach(function(input) {
      input.addEventListener('change', function() {
          let fileName = this.files[0].name;
          let label = this.nextElementSibling;
          label.classList.add("selected");
          label.innerText = fileName;
      });
  });
});

document.addEventListener('DOMContentLoaded', function () {
  var fileInputs = document.querySelectorAll('.custom-file-input');

  fileInputs.forEach(function(fileInput) {
      var fileLabel = fileInput.nextElementSibling;

      fileInput.addEventListener('change', function () {
          if (fileInput.files.length > 0) {
              fileLabel.classList.remove('icon-upload');
              fileLabel.classList.add('icon-check');
          } else {
              fileLabel.classList.remove('icon-check');
              fileLabel.classList.add('icon-upload');
          }
      });

      // Establecer la clase inicial
      fileLabel.classList.add('icon-upload');
  });
});

document.addEventListener('DOMContentLoaded', function () {
  var searchInput = document.getElementById('jobSearchInput');
  var jobsContainer = document.getElementById('jobs_grid');
  var jobs = jobsContainer.querySelectorAll('.card');

  searchInput.addEventListener('keyup', function () {
      var query = searchInput.value.toLowerCase();

      jobs.forEach(function (job) {
          var jobName = job.querySelector('h3').innerText.toLowerCase();
          var referenceName = job.querySelector('.text-muted') ? job.querySelector('.text-muted').innerText.toLowerCase() : '';

          if (jobName.includes(query) || referenceName.includes(query)) {
              job.style.display = '';
          } else {
              job.style.display = 'none';
          }
      });
  });
});

// MAPA DINAMICO CON GOOGLE MAPS

let map;
let marker;
let geocoder;

window.addEventListener('load', function () {
  if (typeof google !== 'undefined' && google.maps) {
    initMap();
  }
});


function initMap() {
  const defaultLatLng = { lat: -12.0464, lng: -77.0428 }; // Lima, Per√∫ por defecto
  map = new google.maps.Map(document.getElementById("map"), {
    zoom: 6,
    center: defaultLatLng,
  });

  geocoder = new google.maps.Geocoder();

  map.addListener("click", (event) => {
    placeMarker(event.latLng);
    reverseGeocode(event.latLng);
  });
}

function placeMarker(location) {
  if (marker) {
    marker.setPosition(location);
  } else {
    marker = new google.maps.Marker({
      position: location,
      map: map,
    });
  }
}


function reverseGeocode(latlng) {
  geocoder.geocode({ location: latlng }, function (results, status) {
    if (status === "OK" && results[0]) {
      const components = results[0].address_components;

      let country = "";
      let department = "";
      let province = "";
      let district = "";

      components.forEach((comp) => {
        const types = comp.types;

        if (types.includes("country")) {
          country = comp.long_name;
        }

        if (types.includes("administrative_area_level_1")) {
          department = comp.long_name;
        }

        if (types.includes("administrative_area_level_2")) {
          province = comp.long_name;
        }

        if (types.includes("sublocality") || types.includes("locality")) {
          district = comp.long_name;
        }
      });

      console.log("üó∫ Direcci√≥n detectada:");
      console.log("Pa√≠s:", country);
      console.log("Departamento:", department);
      console.log("Provincia:", province);
      console.log("Distrito:", district);

      // Paso 1: Seleccionar pa√≠s y esperar a que est√© listo
      setSelectByText("country_id", country, function () {
        // Paso 2: Seleccionar departamento y esperar a que ubigeo.js lo procese
        setSelectByText("state_id", department, function () {
          // Paso 3: Seleccionar provincia (solo si el departamento ya est√° cargado)
          setSelectByText("city_id", province, function () {
            // Paso 4: Finalmente seleccionar distrito
            setSelectByText("district_id", district);
          });
        });
      });
    } else {
      alert("No se pudo obtener la ubicaci√≥n.");
    }
  });
}



function normalizeText(text) {
  return text
    .toLowerCase()
    .replace(/^(provincia|regi√≥n|departamento|province|region|state|estado|municipio|city|localidad|county|comuna)\s+de\s+/gi, "") // limpia encabezados
    .normalize("NFD") // descompone acentos
    .replace(/[\u0300-\u036f]/g, "") // elimina acentos
    .replace(/\s+/g, " ") // espacios √∫nicos
    .trim();
}


function setSelectByText(selectId, textToMatch, callback = null) {
  const select = document.getElementById(selectId);
  if (!select) {
    console.warn(`‚ö†Ô∏è Select no encontrado: ${selectId}`);
    if (typeof callback === "function") callback();
    return;
  }

  const normalizedTarget = normalizeText(textToMatch);
  const options = select.querySelectorAll("option");
  let matched = false;

  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    const optText = normalizeText(opt.textContent || "");

    if (optText === normalizedTarget) {
      select.selectedIndex = i;
      matched = true;

      const event = new Event("change", { bubbles: true });
      select.dispatchEvent(event);

      if (typeof callback === "function") {
        setTimeout(callback, 250);
      }
      break;
    }
  }

  // üîÅ Fallback: buscar por data-country_id si es state_id
  if (!matched && selectId === "state_id") {
    const countrySelect = document.getElementById("country_id");
    const selectedCountryId = countrySelect?.value || null;

    if (selectedCountryId) {
      const fallbackOptions = Array.from(options).filter(opt =>
        opt.dataset.country_id === selectedCountryId
      );

      for (let opt of fallbackOptions) {
        const optText = normalizeText(opt.textContent || "");
        if (optText.includes(normalizedTarget)) {
          opt.selected = true;
          const event = new Event("change", { bubbles: true });
          select.dispatchEvent(event);

          if (typeof callback === "function") {
            setTimeout(callback, 250);
          }
          matched = true;
          break;
        }
      }
    }
  }

  if (!matched) {
    console.warn(`‚ö†Ô∏è No se pudo encontrar match para "${textToMatch}" en "${selectId}"`);
  }

  if (typeof callback === "function") {
    callback();
  }
}