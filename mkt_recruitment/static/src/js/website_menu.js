(function() {
  'use strict';
  window.addEventListener('load', function() {
    var forms = document.getElementsByClassName('needs-validation');
    var validation = Array.prototype.filter.call(forms, function(form) {
      form.addEventListener('submit', function(event) {
        if (form.checkValidity() === false) {
          event.preventDefault();
          event.stopPropagation();
        }
        form.classList.add('was-validated');
      }, false);
    });
  }, false);
})();

document.addEventListener('DOMContentLoaded', function () {
  var childrenInput = document.getElementById('children');
  var childrenFields = document.getElementById('childrenFields');

  // Cargar datos previos del partner, si existen
    var existingChildrenData = [];
    var dataScript = document.getElementById('partnerChildrenData');
    if (dataScript) {
        try {
            existingChildrenData = JSON.parse(dataScript.textContent);
        } catch (e) {
            console.error("Error parsing partnerChildrenData JSON:", e);
        }
    }

  function generateChildrenFields(numChildren, existingData=[]) {
    // Limpiar campos existentes
    childrenFields.innerHTML = '';

    if (numChildren < 0 || numChildren > 6) {
        alert('S√≥lo se permiten n√∫meros entre 0 y 6.');
        childrenInput.value = '';
        return;
      }

    for (var i = 0; i < numChildren; i++) {
      var child = existingData[i] || {};  // Si hay data previa, precargar

      var childField = document.createElement('div');
      childField.classList.add('form-row', 'mb-3');
      childField.innerHTML = `
        <div class="col-md-12">
            <h3 class="font-weight-bold text-success">Hijo(a) ${i + 1}</h3>
        </div>

        <div class="form-group col">
            <label for="child_dni${i + 1}">DNI*</label>
            <input type="text" name="child_dni${i + 1}" id="child_dni${i + 1}" class="form-control" value="${child.dni || ''}" required />
        </div>

        <div class="form-group col">
            <label for="child_full_name${i + 1}">Nombre*</label>
            <input type="text" name="child_full_name${i + 1}" id="child_full_name${i + 1}" class="form-control" value="${child.full_name || ''}" required />
        </div>

        <div class="form-group col">
            <label for="child_birthday${i + 1}">F. Nac*</label>
            <input type="date" name="child_birthday${i + 1}" id="child_birthday${i + 1}" class="form-control" value="${child.birthday || ''}" required />
        </div>

        <div class="form-group col">
            <label for="child_relationship${i + 1}">Parentesco*</label>
            <select class="form-control" name="child_relationship${i + 1}" id="child_relationship${i + 1}" required>
                <option value="">Seleccione una opci√≥n</option>
                <option value="Hijo" ${child.relationship === 'Hijo' ? 'selected' : ''}>Hijo</option>
                <option value="Hija" ${child.relationship === 'Hija' ? 'selected' : ''}>Hija</option>
            </select>
        </div>

        <div class="form-group col">
            <label for="child_gender${i + 1}">G√©nero*</label>
            <select class="form-control" name="child_gender${i + 1}" id="child_gender${i + 1}" required>
                <option value="">Seleccione una opci√≥n</option>
                <option value="male" ${child.gender === 'male' ? 'selected' : ''}>Masculino</option>
                <option value="female" ${child.gender === 'female' ? 'selected' : ''}>Femenino</option>
            </select>
        </div>

        <div class="form-group col">
            <label for="child_address${i + 1}">Direcci√≥n*</label>
            <input type="text" name="child_address${i + 1}" id="child_address${i + 1}" class="form-control" value="${child.address || ''}" required />
        </div>
      `;

      childrenFields.appendChild(childField);
    }
  }
  
  // Generar al escribir
  if (childrenInput && childrenFields) {
      childrenInput.addEventListener('input', function () {
          var numChildren = parseInt(this.value);
          generateChildrenFields(numChildren);
      });

      // Generar al cargar (si ya hay valor)
      var initialChildren = parseInt(childrenInput.value) || 0;
      if (initialChildren > 0) {
          generateChildrenFields(initialChildren, existingChildrenData);
      }
  }
});


const MAX_BENEFICIARIES = 6;

// üîÅ Actualiza t√≠tulos "Familiar 1", "Familiar 2", etc.
function updateBeneficiaryTitles() {
  const rows = document.querySelectorAll('#familyMembersFields .form-row');
  rows.forEach((row, idx) => {
    const title = row.querySelector('h3');
    if (title) {
      title.textContent = `Familiar ${idx + 1}`;
    }
  });
}

// ‚úÖ Crea una fila de beneficiario (vac√≠a o con datos)
function createBeneficiaryRow(autoGenerated = false, data = {}) {
  const familyMembersFields = document.getElementById('familyMembersFields');

  const currentCount = familyMembersFields.querySelectorAll('.form-row').length;
  if (currentCount >= MAX_BENEFICIARIES) {
    alert('No se pueden agregar m√°s de 6 beneficiarios.');
    return;
  }

  const index = currentCount + 1;

  const row = document.createElement('div');
  row.classList.add('form-row', 'mb-3');
  if (autoGenerated) row.classList.add('auto-generated');

  row.innerHTML = `
    <div class="col-md-12 d-flex justify-content-between align-items-center">
        <h3 class="font-weight-bold text-info">Familiar ${index}</h3>
        <button type="button" class="btn btn-danger btn-sm text-white remove-beneficiary" title="Eliminar beneficiario">‚ùå</button>
    </div>

    <div class="form-group col">
        <label>DNI</label>
        <input type="text" name="familiar_dni${index}" class="form-control" value="${data.dni || ''}" required />
    </div>

    <div class="form-group col">
        <label>Nombre</label>
        <input type="text" name="familiar_full_name${index}" class="form-control" value="${data.name || ''}" required />
    </div>

    <div class="form-group col">
        <label>F. Nac</label>
        <input type="date" name="familiar_birthday${index}" class="form-control" value="${data.birthday || ''}" required />
    </div>

    <div class="form-group col">
        <label>Parentesco</label>
        <select name="familiar_relationship${index}" class="form-control" required>
            <option value="">Seleccione una opci√≥n</option>
            <option value="Esposo/a" ${data.relationship === 'Esposo/a' ? 'selected' : ''}>Esposo(a)</option>
            <option value="Conviviente" ${data.relationship === 'Conviviente' ? 'selected' : ''}>Conviviente</option>
            <option value="Hijo" ${data.relationship === 'Hijo' ? 'selected' : ''}>Hijo</option>
            <option value="Hija" ${data.relationship === 'Hija' ? 'selected' : ''}>Hija</option>
        </select>
    </div>

    <div class="form-group col">
        <label>G√©nero</label>
        <select name="familiar_gender${index}" class="form-control" required>
            <option value="">Seleccione una opci√≥n</option>
            <option value="male" ${data.gender === 'male' ? 'selected' : ''}>Masculino</option>
            <option value="female" ${data.gender === 'female' ? 'selected' : ''}>Femenino</option>
        </select>
    </div>

    <div class="form-group col">
        <label>Direcci√≥n</label>
        <input type="text" name="familiar_address${index}" class="form-control" value="${data.address || ''}" required />
    </div>

    <div class="form-group col" style="display:none;">
        <label>Beneficiario</label>
        <input type="checkbox" name="is_beneficiary${index}" class="form-control" checked />
    </div>
  `;

  // Bot√≥n para eliminar esta fila
  row.querySelector('.remove-beneficiary').addEventListener('click', () => {
    row.remove();
    updateBeneficiaryTitles();
  });

  familyMembersFields.appendChild(row);
  updateBeneficiaryTitles();
}

document.addEventListener('DOMContentLoaded', function () {
  const familyMembersField = document.getElementById('familyMembers');
  const addEmptyBtn = document.getElementById('addEmptyBeneficiary');
  const copyBtn = document.getElementById('copyChildrenToBeneficiaries');
  const familyMembersFields = document.getElementById('familyMembersFields');
  const childrenFields = document.getElementById('childrenFields');

  // Limpiar los autogenerados por el input
  function clearAutoGeneratedBeneficiaries() {
    familyMembersFields.querySelectorAll('.auto-generated').forEach(el => el.remove());
    updateBeneficiaryTitles();
  }


  // üìå Bot√≥n para agregar beneficiario vac√≠o
  if (addEmptyBtn) {
    addEmptyBtn.addEventListener('click', function () {
      createBeneficiaryRow(false);
    });
  }

  // üìå Bot√≥n para copiar hijos a beneficiarios
  if (copyBtn && childrenFields) {
    copyBtn.addEventListener('click', function () {
      const children = childrenFields.querySelectorAll('.form-row');
      let total = familyMembersFields.querySelectorAll('.form-row').length;

      for (const child of children) {
        if (total >= MAX_BENEFICIARIES) {
          alert("No se pueden agregar m√°s de 6 beneficiarios.");
          break;
        }

        const getVal = (selector) => child.querySelector(selector)?.value || '';
        const data = {
          dni: getVal('input[name^="child_dni"]'),
          name: getVal('input[name^="child_full_name"]'),
          birthday: getVal('input[name^="child_birthday"]'),
          relationship: getVal('select[name^="child_relationship"]'),
          gender: getVal('select[name^="child_gender"]'),
          address: getVal('input[name^="child_address"]')
        };

        createBeneficiaryRow(false, data);
        total++;
      }
    });
  }
});


document.addEventListener('DOMContentLoaded', function() {
  var otrosMembersInput = document.getElementById('otrosMembers');
  var otrosMembersFields = document.getElementById('otrosMembersFields');

   // Cargar datos previos del partner, si existen
    var existingOtherBeneficiaryData = [];
    var dataScript = document.getElementById('partnerOtherBeneficiaryData');
    if (dataScript) {
        try {
            existingOtherBeneficiaryData = JSON.parse(dataScript.textContent);
        } catch (e) {
            console.error("Error parsing partnerOtherBeneficiaryData JSON:", e);
        }
    }

    
    function generateOtherBeneficiaryFields(numOtherBeneficiary, existingData=[]) {
      otrosMembersFields.innerHTML = '';

      for (var j = 0; j < numOtherBeneficiary; j++) {
        var otherBeneficiary = existingData[j] || {};  // Si hay data previa, precargar

        var otrosMembersInput = document.createElement('div');
        otrosMembersInput.classList.add('form-row', 'mb-3');
        otrosMembersInput.innerHTML = `
          
            <div class="col-md-12">
                <h3 class="font-weight-bold text-info">Otro Beneficiario ${j + 1}</h3>
            </div>
            
            <div class="form-group col">
                <label for="familiar_dni${j + 7}">DNI*</label>
                <input type="text" name="familiar_dni${j + 7}" id="familiar_dni${j + 7}" class="form-control" required="True" value="${otherBeneficiary.dni || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese su DNI.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_full_name${j + 7}" >Nombre*</label>
                <input type="text" name="familiar_full_name${j + 7}" id="familiar_full_name${j + 7}" class="form-control" required="True" value="${otherBeneficiary.full_name || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese su nombre.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_birthday${j + 7}">F. Nac*</label>
                <input type="date" name="familiar_birthday${j + 7}" class="form-control" id="familiar_birthday${j + 7}" required="True" value="${otherBeneficiary.birthday || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese su fecha de nacimiento.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_relationship${j + 7}">Parentesco*</label>
                <select class="form-control" name="familiar_relationship${j + 7}" id="familiar_relationship${j + 7}" required="True">
                    <option value="">Seleccione una opci√≥n</option>
                    <option value="Madre" ${otherBeneficiary.relationship === 'Madre' ? 'selected' : ''} >Madre</option>
                    <option value="Padre" ${otherBeneficiary.relationship === 'Padre' ? 'selected' : ''} >Padre</option>
                    <option value="Hermano" ${otherBeneficiary.relationship === 'Hermano' ? 'selected' : ''} >Hermano</option>
                    <option value="Hermana" ${otherBeneficiary.relationship === 'Hermana' ? 'selected' : ''} >Hermana</option>
                </select>
                <div class="invalid-feedback">
                  Por favor, seleccione un parentesco.
                </div>
            </div>

            <div class="form-group col">
                <label for="familiar_gender${j + 7}">G√©nero*</label>
                <select class="form-control" name="familiar_gender${j + 7}" id="familiar_gender${j + 7}" required="True">
                    <option value="">Seleccione una opci√≥n</option>
                    <option value="male" ${otherBeneficiary.gender === 'male' ? 'selected' : ''} >Masculino</option>
                    <option value="female" ${otherBeneficiary.gender === 'female' ? 'selected' : ''} >Femenino</option>
                </select>
                <div class="invalid-feedback">
                  Por favor, seleccione un g√©nero.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_address${j + 7}">Direcci√≥n*</label>
                <input type="text" name="familiar_address${j + 7}" class="form-control" id="familiar_address${j + 7}" required="True" value="${otherBeneficiary.address || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese una direcci√≥n.
                </div>
            </div>
            <div class="form-group col" style="display:none;">
              <label for="is_beneficiary${j + 7}">Beneficiario</label>
              <input type="checkbox" name="is_beneficiary${j + 7}" class="form-control" id="is_beneficiary${j + 7}" checked/>
            </div>
        `;
        otrosMembersFields.appendChild(otrosMembersInput);
      }
    }
    // Generar al escribir
    if (otrosMembersInput && otrosMembersFields) {
        otrosMembersInput.addEventListener('input', function () {
            var numOtherBeneficiary = parseInt(this.value);
            generateOtherBeneficiaryFields(numOtherBeneficiary);
        });

        // Generar al cargar (si ya hay valor)
        var initialOtherBeneficiary = parseInt(otrosMembersInput.value) || 0;
        if (initialOtherBeneficiary > 0) {
            generateOtherBeneficiaryFields(initialOtherBeneficiary, existingOtherBeneficiaryData);
        }
    }

});

document.addEventListener('DOMContentLoaded', function() {
  var firstMembersInput = document.getElementById('firstMembers');
  var firstMembersFields = document.getElementById('familyMembersFields');

   // Cargar datos previos del partner, si existen
    var existingFirstBeneficiariesData = [];
    var dataScript = document.getElementById('partnerFirstBeneficiariesData');
    if (dataScript) {
        try {
            existingFirstBeneficiariesData = JSON.parse(dataScript.textContent);
        } catch (e) {
            console.error("Error parsing partnerFirstBeneficiariesData JSON:", e);
        }
    }

    
    function generateFirstBeneficiariesFields(numFirstBeneficiaries, existingData=[]) {
      firstMembersFields.innerHTML = '';

      for (var j = 0; j < numFirstBeneficiaries; j++) {
        var firstBeneficiary = existingData[j] || {};  // Si hay data previa, precargar

        var firstMembersInput = document.createElement('div');
        firstMembersInput.classList.add('form-row', 'mb-3');
        firstMembersInput.innerHTML = `
          
            <div class="col-md-12">
                <h3 class="font-weight-bold text-info"> Beneficiario ${j + 1}</h3>
            </div>
            
            <div class="form-group col">
                <label for="familiar_dni${j + 1}">DNI*</label>
                <input type="text" name="familiar_dni${j + 1}" id="familiar_dni${j + 1}" class="form-control" required="True" value="${firstBeneficiary.dni || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese su DNI.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_full_name${j + 1}" >Nombre*</label>
                <input type="text" name="familiar_full_name${j + 1}" id="familiar_full_name${j + 1}" class="form-control" required="True" value="${firstBeneficiary.full_name || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese su nombre.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_birthday${j + 1}">F. Nac*</label>
                <input type="date" name="familiar_birthday${j + 1}" class="form-control" id="familiar_birthday${j + 1}" required="True" value="${firstBeneficiary.birthday || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese su fecha de nacimiento.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_relationship${j + 1}">Parentesco*</label>
                <select class="form-control" name="familiar_relationship${j + 1}" id="familiar_relationship${j + 1}" required="True">
                    <option value="">Seleccione una opci√≥n</option>
                    <option value="Madre" ${firstBeneficiary.relationship === 'Madre' ? 'selected' : ''} >Madre</option>
                    <option value="Padre" ${firstBeneficiary.relationship === 'Padre' ? 'selected' : ''} >Padre</option>
                    <option value="Hermano" ${firstBeneficiary.relationship === 'Hermano' ? 'selected' : ''} >Hermano</option>
                    <option value="Hermana" ${firstBeneficiary.relationship === 'Hermana' ? 'selected' : ''} >Hermana</option>
                </select>
                <div class="invalid-feedback">
                  Por favor, seleccione un parentesco.
                </div>
            </div>

            <div class="form-group col">
                <label for="familiar_gender${j + 1}">G√©nero*</label>
                <select class="form-control" name="familiar_gender${j + 1}" id="familiar_gender${j + 1}" required="True">
                    <option value="">Seleccione una opci√≥n</option>
                    <option value="male" ${firstBeneficiary.gender === 'male' ? 'selected' : ''} >Masculino</option>
                    <option value="female" ${firstBeneficiary.gender === 'female' ? 'selected' : ''} >Femenino</option>
                </select>
                <div class="invalid-feedback">
                  Por favor, seleccione un g√©nero.
                </div>
            </div>
            <div class="form-group col">
                <label for="familiar_address${j + 1}">Direcci√≥n*</label>
                <input type="text" name="familiar_address${j + 1}" class="form-control" id="familiar_address${j + 1}" required="True" value="${firstBeneficiary.address || ''}"/>
                <div class="invalid-feedback">
                  Por favor, ingrese una direcci√≥n.
                </div>
            </div>
            <div class="form-group col" style="display:none;">
              <label for="is_beneficiary${j + 1}">Beneficiario</label>
              <input type="checkbox" name="is_beneficiary${j + 1}" class="form-control" id="is_beneficiary${j + 1}" checked/>
            </div>
        `;
        firstMembersFields.appendChild(firstMembersInput);
      }
    }
    // Generar al escribir
    if (firstMembersInput && firstMembersFields) {
        firstMembersInput.addEventListener('input', function () {
            var numFirstBeneficiaries = parseInt(this.value);
            generateFirstBeneficiariesFields(numFirstBeneficiaries);
        });

        // Generar al cargar (si ya hay valor)
        var initialfirstBeneficiary = parseInt(firstMembersInput.value) || 0;
        if (initialfirstBeneficiary > 0) {
            generateFirstBeneficiariesFields(initialfirstBeneficiary, existingFirstBeneficiariesData);
        }
    }

});

document.addEventListener('DOMContentLoaded', function() {
var privatePensionCheckbox = document.getElementById('private_pension_system');
var pensionOptionsContainer = document.getElementById('pension_options');
var afpFirstJob = document.getElementById('afp_first_job');
var comingFromOnp = document.getElementById('coming_from_onp');
var comingFromAfp = document.getElementById('coming_from_afp');
var radioOptions = document.querySelectorAll('.radio-option');

privatePensionCheckbox.addEventListener('change', function() {
  console.log('ingresamos')
if (this.checked) {
  pensionOptionsContainer.style.display = 'block';
} else {
  pensionOptionsContainer.style.display = 'none';
  radioOptions.forEach(radio => radio.checked = false);
  afpFirstJob.checked = false;
  comingFromOnp.checked = false;
  comingFromAfp.checked = false;
}
});

radioOptions.forEach(radio => {
radio.addEventListener('change', function() {
  radioOptions.forEach(otherRadio => {
    if (otherRadio !== this) {
      otherRadio.checked = false;
    }
  });
});
});

});

document.addEventListener('DOMContentLoaded', function () {
  var childrenInput = document.getElementById('children');
  if (childrenInput) {
    childrenInput.addEventListener('input', validateInputChildren);
  }
});

function validateInputChildren() {
  var input = document.getElementById('children');
  var value = parseInt(input.value);
  if (value < 0 || value > 6) {
      alert('S√≥lo los n√∫meros entre 0 y 6 est√°n permitidos para los ni√±os.');
      input.value = '';
  }
}

function validateInput() {
  var input = document.getElementById('otrosMembers');
  var value = parseInt(input.value);
  if (value < 0 || value > 4) {
      alert('S√≥lo se permiten los n√∫meros 1, 2, 3 y 4.');
      input.value = '';
  }
}

function toggleCheckbox(checkbox) {
  var afpFirstJob = document.getElementById('afp_first_job');
  var comingFromOnp = document.getElementById('coming_from_onp');
  var comingFromAfp = document.getElementById('coming_from_afp');
  var otherCheckbox = document.getElementById(checkbox.id === 'private_pension_system' ? 'national_pension_system' : 'private_pension_system');
  if (checkbox.checked) {
      otherCheckbox.checked = false;
      if (checkbox.id === 'private_pension_system') {
          document.getElementById('pension_options').style.display = 'block';
      } else {
          document.getElementById('pension_options').style.display = 'none';
          afpFirstJob.checked = false;
          comingFromOnp.checked = false;
          comingFromAfp.checked = false;
      }
  } else {
      document.getElementById('pension_options').style.display = 'none';
      afpFirstJob.checked = false;
      comingFromOnp.checked = false;
      comingFromAfp.checked = false;
  }
}

async function apiperu_dni(dni) {
  const url = "https://apiperu.dev/api/dni";
  const token =
    "4b56a00274d444b40cc38d47e69c72d6f5a362dddbee20470b9f1dd8d6a65479";
  const headers = {
    Accept: "application/json",
    "Content-Type": "application/json",
    Authorization: `Bearer ${token}`,
  };
  try {
    const params = { dni: String(dni) };
    const params_json = JSON.stringify(params);
    const response = await fetch(url, {
      method: "POST",
      headers: headers,
      body: params_json,
    });
    if (response.ok) {
      const data = await response.json();
      const access_data = data.data;
      return [
        access_data.nombre_completo,
      ];
    } else {
      console.error(`Error ${response.status}`);
      console.error(await response.text());
    }
  } catch (error) {
    console.error(`Error ${error}`);
  }
}

async function consultarDNI() {
  const dni = document.getElementById("dni").value;
  if (dni) {
    try {
      const [nombre_completo] = await apiperu_dni(dni);
      document.getElementById("name").value = nombre_completo;
      console.log(document.getElementById("name").value);
      console.log(name);
      console.log(nombre_completo);
    } catch (error) {
      console.error("Error al consultar el DNI:", error);
    }
  } else {
    console.error("Ingrese un n√∫mero de DNI");
  }
}

  function toggleFifthCategory(checkbox, isYes) {
      const FalseCheckbox = document.getElementById('fifth_no');
      const TrueCheckbox = document.getElementById('fifth_yes');
      // const errorMsg = document.querySelector('#fifth_no').closest('.form-group').querySelector('.invalid-feedback');

      // Asegurar exclusividad entre checkboxes
      if (isYes) {
          FalseCheckbox.checked = false;
      } else {
          TrueCheckbox.checked = false;
      }

      // Ocultar mensaje de error si el usuario selecciona algo
      // if (TrueCheckbox.checked || FalseCheckbox.checked) {
      //     errorMsg.style.display = 'none';
      // }
  }


function validateForm(event) {
  event.preventDefault();
  const form = document.getElementById('employeeForm');
  const fields = form.querySelectorAll('input, select, textarea');
  let allFieldsValid = true;
  let requiredFieldsValid = true;

  fields.forEach(field => {
      if (!field.checkValidity()) {
          allFieldsValid = false;
          if (field.hasAttribute('required')) {
              requiredFieldsValid = false;
          }
          field.classList.add('is-invalid');
      } else {
          field.classList.remove('is-invalid');
      }
  });

  /* ======================= VALIDACI√ìN SISTEMA DE PENSIONES ======================= */
  const privatePensionCheckbox = document.getElementById('private_pension_system');
  const nationalPensionCheckbox = document.getElementById('national_pension_system');
  const afpRadios = document.querySelectorAll('.radio-option');

  let pensionValid = true;

  // Al menos uno de los dos debe estar marcado
  if (!privatePensionCheckbox.checked && !nationalPensionCheckbox.checked) {
      pensionValid = false;
      privatePensionCheckbox.classList.add('is-invalid');
      nationalPensionCheckbox.classList.add('is-invalid');
  } else {
      privatePensionCheckbox.classList.remove('is-invalid');
      nationalPensionCheckbox.classList.remove('is-invalid');
  }

  // Si AFP est√° seleccionado, validar que se haya marcado una de las 3 opciones
  if (privatePensionCheckbox.checked) {
      const afpSelected = Array.from(afpRadios).some(r => r.checked);
      if (!afpSelected) {
          pensionValid = false;
          afpRadios.forEach(r => r.classList.add('is-invalid'));
      } else {
          afpRadios.forEach(r => r.classList.remove('is-invalid'));
      }
  } else {
      afpRadios.forEach(r => r.classList.remove('is-invalid'));
  }

  // Si falla esta validaci√≥n, no contin√∫es
  if (!pensionValid) {
      requiredFieldsValid = false;
      allFieldsValid = false;
  }


  /* ======================= VALIDACI√ìN QUINTA CATEGOR√çA ======================= */
  const fifthNo = document.getElementById('fifth_no');
  const fifthYes = document.getElementById('fifth_yes');
  const fifthError = fifthNo.closest('.form-group').querySelector('.invalid-feedback');
  let fifthValid = true;

  // Ninguno seleccionado ‚Üí inv√°lido
  if (!fifthNo.checked && !fifthYes.checked) {
      fifthValid = false;
      fifthError.style.display = 'block';
      fifthNo.classList.add('is-invalid');
      fifthYes.classList.add('is-invalid');
  } else {
      fifthValid = true;
      fifthError.style.display = 'none';
      fifthNo.classList.remove('is-invalid');
      fifthYes.classList.remove('is-invalid');
  }

  if (!fifthValid) {
      requiredFieldsValid = false;
      allFieldsValid = false;
  }
  /* ======================= SCROLL Y MODAL======================= */
  
  if (!pensionValid || !fifthValid || !allFieldsValid) {
    const firstInvalid = form.querySelector('.is-invalid');
    if (firstInvalid) 
      firstInvalid.scrollIntoView({ behavior: 'smooth', block: 'center' });
  }
  
  // Solo abrir el modal si todo est√° correcto
  if (requiredFieldsValid) {
      populateModal();  
      $('#confirmationModal').modal('show');
  }

  return allFieldsValid;
}


document.addEventListener('DOMContentLoaded', function() {
    const privatePensionSystemField = document.getElementById('private_pension_system');
    const pensionOptions = document.getElementById('pension_options');

    if (privatePensionSystemField && pensionOptions) {
        // Escucha cambios del checkbox AFP
        privatePensionSystemField.addEventListener('change', function() {
            if (privatePensionSystemField.type === 'checkbox') {
                pensionOptions.style.display = this.checked ? 'block' : 'none';
            } else {
                pensionOptions.style.display = this.value === 'yes' ? 'block' : 'none';
            }

            // Si se desmarca AFP, limpiar los subcampos
            if (!this.checked && this.type === 'checkbox') {
                document.getElementById('afp_first_job').checked = false;
                document.getElementById('coming_from_onp').checked = false;
                document.getElementById('coming_from_afp').checked = false;
            }
        });

        // üîπ Al cargar la p√°gina, aplica el estado correcto seg√∫n el valor del backend
        if (privatePensionSystemField.checked || privatePensionSystemField.value === 'yes') {
            pensionOptions.style.display = 'block';
        } else {
            pensionOptions.style.display = 'none';
        }
    }
});



function populateModal() {
  const getValue = (id) => {
    const el = document.getElementById(id);
    return el ? el.value : '';
  };

  const setText = (id, value) => {
    const el = document.getElementById(id);
    if (el) {
      el.innerText = value;
    } else {
      console.warn(`‚ùå ID no encontrado en el DOM: '${id}' ‚Äî Valor que intentaste asignar: '${value}'`);
    }
  };

  const getCheckedText = (id) => {
    const el = document.getElementById(id);
    return el && el.checked ? 'Si' : 'No';
  };

  const getOptionText = (id) => getSelectedOptionTextById(id) || '';

  setText('modal-dni', getValue('dni'));
  setText('modal-name', getValue('name'));
  setText('modal-children', getValue('children'));
  setText('modal-gender', getOptionText('gender'));
  setText('modal-birthday', getValue('birthday'));
  setText('modal-marital', getOptionText('marital'));
  setText('modal-email', getValue('email'));
  setText('modal-phone', getValue('phone'));
  setText('modal-emergency_contact', getValue('emergency_contact'));
  setText('modal-emergency_phone', getValue('emergency_phone'));
  setText('modal-nationality', getOptionText('nationality_id'));
  setText('modal-identification', getOptionText('identification_type_id'));
  setText('modal-country', getOptionText('country_id'));
  setText('modal-province', getOptionText('state_id'));
  setText('modal-city', getOptionText('city_id'));
  setText('modal-district', getOptionText('district_id'));
  setText('modal-street', getValue('street'));
  setText('modal-reference_location', getValue('reference_location'));
  setText('modal-education_level', getSelectedOptionTextBySelector('select[name="education_level"]'));
  setText('modal-education_start_date', getValue('education_start_date'));
  setText('modal-education_end_date', getValue('education_end_date'));
  setText('modal-institution', getValue('institution'));
  setText('modal-profession', getValue('profession'));

  // ‚úîÔ∏è Cantidad de familiares din√°micamente
  const count = document.querySelectorAll('#familyMembersFields .form-row').length;
  setText('modal-familyMembers', count);

  setText('modal-otrosMembers', getValue('otrosMembers'));
  setText('modal-private_pension_system', getCheckedText('private_pension_system'));
  setText('modal-national_pension_system', getCheckedText('national_pension_system'));

  const privatePensionSystem = document.getElementById('private_pension_system')?.checked;
  const modalPensOpti = document.getElementById('pens_opti');
  const modalPensionOption = document.getElementById('modal-pension-option');

  if (modalPensOpti) {
    modalPensOpti.style.display = privatePensionSystem ? 'block' : 'none';
  }

  let pensionOptionText = 'No seleccionado';
  if (privatePensionSystem) {
    if (document.getElementById('afp_first_job')?.checked) pensionOptionText = '(AFP) Primer empleo';
    else if (document.getElementById('coming_from_onp')?.checked) pensionOptionText = 'Procedente de la ONP';
    else if (document.getElementById('coming_from_afp')?.checked) pensionOptionText = 'Procedente de la AFP';
  }

  if (modalPensionOption) modalPensionOption.innerText = pensionOptionText;

  // üë®‚Äçüë©‚Äçüëß Mostrar familiares (primeros beneficiarios) en tabla del modal
  // üßë‚Äçüë©‚Äçüëß Mostrar familiares (primeros beneficiarios) en tabla del modal
  (function renderFamilyMembersTable() {
    const familyMembersModal = document.getElementById('familyMembersModal');
    const familyFieldsContainer = document.getElementById('familyMembersFields');
    if (!familyMembersModal || !familyFieldsContainer) return;

    const rows = familyFieldsContainer.querySelectorAll('.form-row');
    if (rows.length === 0) {
      familyMembersModal.innerHTML = '<p class="text-muted">No hay familiares registrados.</p>';
      return;
    }

    let tableHTML = `
      <table class="table table-striped table-bordered">
        <thead class="thead-dark">
          <tr>
            <th>#</th>
            <th>DNI</th>
            <th>Nombre</th>
            <th>F. Nac</th>
            <th>Parentesco</th>
            <th>G√©nero</th>
            <th>Direcci√≥n</th>
          </tr>
        </thead>
        <tbody>`;

    rows.forEach((row, idx) => {
      const getFieldValue = (selector) => {
        const field = row.querySelector(selector);
        return field ? field.value : '';
      };

      tableHTML += `
        <tr>
          <td>${idx + 1}</td>
          <td>${getFieldValue('input[name^="familiar_dni"]')}</td>
          <td>${getFieldValue('input[name^="familiar_full_name"]')}</td>
          <td>${getFieldValue('input[name^="familiar_birthday"]')}</td>
          <td>${getFieldValue('select[name^="familiar_relationship"]')}</td>
          <td>${getFieldValue('select[name^="familiar_gender"]')}</td>
          <td>${getFieldValue('input[name^="familiar_address"]')}</td>
        </tr>`;
    });

    tableHTML += '</tbody></table>';
    familyMembersModal.innerHTML = tableHTML;
  })();



  // üßì Otros miembros
  const otrosMembersCount = parseInt(getValue('otrosMembers'), 10);
  const otrosMembersModal = document.getElementById('otrosMembersModal');
  if (otrosMembersModal) {
    otrosMembersModal.innerHTML = '';
    if (otrosMembersCount > 0) {
      let tableHTML = `
        <table class="table table-striped">
          <thead>
            <tr><th>DNI</th><th>Nombre</th><th>F. Nac</th><th>Parentesco</th><th>G√©nero</th><th>Direcci√≥n</th></tr>
          </thead><tbody>`;

      for (let j = 7; j < 7 + otrosMembersCount; j++) {
        tableHTML += `
          <tr>
            <td>${getValue(`familiar_dni${j}`)}</td>
            <td>${getValue(`familiar_full_name${j}`)}</td>
            <td>${getValue(`familiar_birthday${j}`)}</td>
            <td>${getOptionText(`familiar_relationship${j}`)}</td>
            <td>${getOptionText(`familiar_gender${j}`)}</td>
            <td>${getValue(`familiar_address${j}`)}</td>
          </tr>`;
      }

      tableHTML += '</tbody></table>';
      otrosMembersModal.innerHTML = tableHTML;
    }
  }
}

function getSelectedOptionTextBySelector(selector) {
  var selectElement = document.querySelector(selector);
  if (selectElement && selectElement.selectedIndex !== -1) {
      var selectedOption = selectElement.options[selectElement.selectedIndex];
      return selectedOption ? selectedOption.text : '';
  }
  return '';
}

function getSelectedOptionTextById(id) {
  const selectElement = document.getElementById(id);
  if (selectElement && selectElement.selectedIndex >= 0) {
      return selectElement.options[selectElement.selectedIndex].text;
  }
  return '';
}

document.addEventListener('DOMContentLoaded', function() {
  var employeeForm = document.getElementById('employeeForm');
  if (employeeForm) {
    employeeForm.addEventListener('submit', validateForm);
  } else {
    console.error('El formulario con ID "employeeForm" no se encontr√≥ en el DOM.');
  }
});


function submitForm() {
  const cancelButton = document.getElementById('cancelButton');
  const confirmButton = document.getElementById('confirmButton');
  
  cancelButton.disabled = true;
  confirmButton.disabled = true;
  confirmButton.innerText = "Processing...";

  document.getElementById('employeeForm').submit();
}

function volverAlFormulario() {
  window.location.href = '/applicantpartner';
}

document.addEventListener('DOMContentLoaded', function() {
  var identificationTypeSelect = document.getElementById('identification_type_id');
  var dniInput = document.getElementById('dni');

  identificationTypeSelect.addEventListener('change', function() {
      var selectedOption = identificationTypeSelect.options[identificationTypeSelect.selectedIndex].text;

      if (selectedOption === 'DNI') {
          dniInput.maxLength = 8;
          dniInput.pattern = '\\d{8}';
          dniInput.title = 'El DNI debe tener exactamente 8 d√≠gitos.';
      } else {
          dniInput.maxLength = 9;
          dniInput.pattern = '\\d{1,9}';
          dniInput.title = 'La identificaci√≥n debe tener un m√°ximo de 9 d√≠gitos.';
      }

      if (dniInput.value.length > dniInput.maxLength) {
          dniInput.value = '';
      }
  });
});

document.addEventListener('DOMContentLoaded', function() {
  document.querySelectorAll('.custom-file-input').forEach(function(input) {
      input.addEventListener('change', function() {
          let fileName = this.files[0].name;
          let label = this.nextElementSibling;
          label.classList.add("selected");
          label.innerText = fileName;
      });
  });
});

document.addEventListener('DOMContentLoaded', function () {
  var fileInputs = document.querySelectorAll('.custom-file-input');

  fileInputs.forEach(function(fileInput) {
      var fileLabel = fileInput.nextElementSibling;

      fileInput.addEventListener('change', function () {
          if (fileInput.files.length > 0) {
              fileLabel.classList.remove('icon-upload');
              fileLabel.classList.add('icon-check');
          } else {
              fileLabel.classList.remove('icon-check');
              fileLabel.classList.add('icon-upload');
          }
      });

      // Establecer la clase inicial
      fileLabel.classList.add('icon-upload');
  });
});

document.addEventListener('DOMContentLoaded', function () {
  var searchInput = document.getElementById('jobSearchInput');
  var jobsContainer = document.getElementById('jobs_grid');
  var jobs = jobsContainer.querySelectorAll('.card');

  searchInput.addEventListener('keyup', function () {
      var query = searchInput.value.toLowerCase();

      jobs.forEach(function (job) {
          var jobName = job.querySelector('h3').innerText.toLowerCase();
          var referenceName = job.querySelector('.text-muted') ? job.querySelector('.text-muted').innerText.toLowerCase() : '';

          if (jobName.includes(query) || referenceName.includes(query)) {
              job.style.display = '';
          } else {
              job.style.display = 'none';
          }
      });
  });
});

// MAPA DINAMICO CON GOOGLE MAPS

let map;
let marker;
let geocoder;

window.addEventListener('load', function () {
  if (typeof google !== 'undefined' && google.maps) {
    initMap();
  }
});


function initMap() {
  const defaultLatLng = { lat: -12.0464, lng: -77.0428 }; // Lima, Per√∫ por defecto
  map = new google.maps.Map(document.getElementById("map"), {
    zoom: 6,
    center: defaultLatLng,
  });

  geocoder = new google.maps.Geocoder();

  map.addListener("click", (event) => {
    placeMarker(event.latLng);
    reverseGeocode(event.latLng);
  });
}

function placeMarker(location) {
  if (marker) {
    marker.setPosition(location);
  } else {
    marker = new google.maps.Marker({
      position: location,
      map: map,
    });
  }
}


function reverseGeocode(latlng) {
  geocoder.geocode({ location: latlng }, function (results, status) {
    if (status === "OK" && results[0]) {
      const components = results[0].address_components;

      let country = "";
      let department = "";
      let province = "";
      let district = "";

      components.forEach((comp) => {
        const types = comp.types;

        if (types.includes("country")) {
          country = comp.long_name;
        }

        if (types.includes("administrative_area_level_1")) {
          department = comp.long_name;
        }

        if (types.includes("administrative_area_level_2")) {
          province = comp.long_name;
        }

        if (types.includes("sublocality") || types.includes("locality")) {
          district = comp.long_name;
        }
      });

      console.log("üó∫ Direcci√≥n detectada:");
      console.log("Pa√≠s:", country);
      console.log("Departamento:", department);
      console.log("Provincia:", province);
      console.log("Distrito:", district);

      // Paso 1: Seleccionar pa√≠s y esperar a que est√© listo
      setSelectByText("country_id", country, function () {
        // Paso 2: Seleccionar departamento y esperar a que ubigeo.js lo procese
        setSelectByText("state_id", department, function () {
          // Paso 3: Seleccionar provincia (solo si el departamento ya est√° cargado)
          setSelectByText("city_id", province, function () {
            // Paso 4: Finalmente seleccionar distrito
            setSelectByText("district_id", district);
          });
        });
      });
    } else {
      alert("No se pudo obtener la ubicaci√≥n.");
    }
  });
}



function normalizeText(text) {
  return text
    .toLowerCase()
    .replace(/^(provincia|regi√≥n|departamento|province|region|state|estado|municipio|city|localidad|county|comuna)\s+de\s+/gi, "") // limpia encabezados
    .normalize("NFD") // descompone acentos
    .replace(/[\u0300-\u036f]/g, "") // elimina acentos
    .replace(/\s+/g, " ") // espacios √∫nicos
    .trim();
}


function setSelectByText(selectId, textToMatch, callback = null) {
  const select = document.getElementById(selectId);
  if (!select) {
    console.warn(`‚ö†Ô∏è Select no encontrado: ${selectId}`);
    if (typeof callback === "function") callback();
    return;
  }

  const normalizedTarget = normalizeText(textToMatch);
  const options = select.querySelectorAll("option");
  let matched = false;

  for (let i = 0; i < options.length; i++) {
    const opt = options[i];
    const optText = normalizeText(opt.textContent || "");

    if (optText === normalizedTarget) {
      select.selectedIndex = i;
      matched = true;

      const event = new Event("change", { bubbles: true });
      select.dispatchEvent(event);

      if (typeof callback === "function") {
        setTimeout(callback, 250);
      }
      break;
    }
  }

  // üîÅ Fallback: buscar por data-country_id si es state_id
  if (!matched && selectId === "state_id") {
    const countrySelect = document.getElementById("country_id");
    const selectedCountryId = countrySelect?.value || null;

    if (selectedCountryId) {
      const fallbackOptions = Array.from(options).filter(opt =>
        opt.dataset.country_id === selectedCountryId
      );

      for (let opt of fallbackOptions) {
        const optText = normalizeText(opt.textContent || "");
        if (optText.includes(normalizedTarget)) {
          opt.selected = true;
          const event = new Event("change", { bubbles: true });
          select.dispatchEvent(event);

          if (typeof callback === "function") {
            setTimeout(callback, 250);
          }
          matched = true;
          break;
        }
      }
    }
  }

  if (!matched) {
    console.warn(`‚ö†Ô∏è No se pudo encontrar match para "${textToMatch}" en "${selectId}"`);
  }

  if (typeof callback === "function") {
    callback();
  }
}

